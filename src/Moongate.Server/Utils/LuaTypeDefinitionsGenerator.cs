using System.Reflection;
using System.Text;
using Moongate.Core.Data.Scripts;
using NLua;

namespace Moongate.Server.Utils;

/// <summary>
/// Generates Lua type definitions for script modules and functions
/// </summary>
public class LuaTypeDefinitionsGenerator
{
    private static readonly StringBuilder _builder = new();
    private static readonly HashSet<Type> _processedTypes = new();
    private static readonly HashSet<Type> _typesToProcess = new();

    /// <summary>
    /// Generates comprehensive Lua type definitions
    /// </summary>
    /// <param name="functions">List of script function descriptors</param>
    /// <param name="contextVariables">Context variables available in Lua</param>
    /// <param name="constants">Constants available in Lua</param>
    /// <returns>Generated Lua type definitions as string</returns>
    public static async Task<string> GenerateTypeDefinitionsAsync(
        List<ScriptFunctionDescriptor> functions,
        Dictionary<string, object> contextVariables,
        Dictionary<string, object> constants
    )
    {
        _builder.Clear();
        _processedTypes.Clear();
        _typesToProcess.Clear();

        _builder.AppendLine("---@meta");
        _builder.AppendLine("");
        _builder.AppendLine("-- This file is auto-generated. Do not edit.");
        _builder.AppendLine("-- Generated by MoonGate Ultima Server");
        _builder.AppendLine("");

        // Generate constant definitions
        await GenerateConstantDefinitionsAsync(constants);

        // Generate complex type definitions
        await GenerateComplexTypesAsync(functions);

        // Generate context variable types
        await GenerateContextVariablesAsync(contextVariables);

        // Generate table definitions
        GenerateTableDefinitions(functions);

        // Generate function definitions
        foreach (var function in functions)
        {
            await GenerateFunctionDefinitionAsync(function);
        }

        return _builder.ToString();
    }

    /// <summary>
    /// Generates constant definitions section
    /// </summary>
    private static async Task GenerateConstantDefinitionsAsync(Dictionary<string, object> constants)
    {
        if (!constants.Any()) return;

        _builder.AppendLine("---@section Constants");
        foreach (var (name, value) in constants)
        {
            _builder.AppendLine($"---@const {name} {LuaTypeConverter.GetLuaType(value)}");
            _builder.AppendLine($"{name} = {value}");
        }

        _builder.AppendLine();
    }

    /// <summary>
    /// Generates complex type definitions by analyzing function parameters and return types
    /// </summary>
    private static async Task GenerateComplexTypesAsync(IEnumerable<ScriptFunctionDescriptor> functions)
    {
        // Discover types from function parameters and return types
        foreach (var function in functions)
        {
            foreach (var param in function.Parameters)
            {
                DiscoverTypes(param.RawParameterType);
            }

            DiscoverTypes(function.RawReturnType);
        }

        // Process all discovered types
        while (_typesToProcess.Count > 0)
        {
            var type = _typesToProcess.First();
            _typesToProcess.Remove(type);

            if (!_processedTypes.Contains(type))
            {
                if (type.IsEnum)
                {
                    GenerateEnumDefinition(type);
                }
                else
                {
                    GenerateClassDefinition(type);
                }

                _processedTypes.Add(type);
            }
        }
    }

    /// <summary>
    /// Recursively discovers types that need definitions
    /// </summary>
    private static void DiscoverTypes(Type type)
    {
        if (type == null || _processedTypes.Contains(type) || _typesToProcess.Contains(type))
            return;

        if (type.IsGenericType)
        {
            foreach (var genericArg in type.GetGenericArguments())
            {
                DiscoverTypes(genericArg);
            }

            return;
        }

        if (IsRelevantType(type))
        {
            _typesToProcess.Add(type);

            // Discover types from properties
            foreach (var prop in type.GetProperties())
            {
                DiscoverTypes(prop.PropertyType);
            }

            // Discover types from methods
            foreach (var method in type.GetMethods())
            {
                if (method.DeclaringType == typeof(object))
                    continue;

                foreach (var param in method.GetParameters())
                {
                    DiscoverTypes(param.ParameterType);
                }

                if (method.ReturnType != typeof(void))
                {
                    DiscoverTypes(method.ReturnType);
                }
            }
        }
    }

    /// <summary>
    /// Determines if a type is relevant for Lua definition generation
    /// </summary>
    private static bool IsRelevantType(Type type)
    {
        return (type.IsClass || type.IsEnum || type.IsValueType) &&
               !type.IsPrimitive &&
               type != typeof(string) &&
               type != typeof(void) &&
               type.Namespace?.StartsWith("System") != true;
    }

    /// <summary>
    /// Generates enum definition with all possible values
    /// </summary>
    private static void GenerateEnumDefinition(Type enumType)
    {
        _builder.AppendLine($"---@alias {enumType.Name}");
        foreach (var value in Enum.GetNames(enumType))
        {
            var memberInfo = enumType.GetMember(value).FirstOrDefault();
            var description = memberInfo?
                    .GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute), false)
                    .Cast<System.ComponentModel.DescriptionAttribute>()
                    .FirstOrDefault()
                    ?.Description ?? $"{value}";

            _builder.AppendLine($"---| '{value}' # {description}");
        }

        _builder.AppendLine();
    }

    /// <summary>
    /// Generates class definition with properties and methods
    /// </summary>
    private static void GenerateClassDefinition(Type type)
    {
        _builder.AppendLine($"---@class {type.Name}");

        // Generate properties
        foreach (var prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            var propType = LuaTypeConverter.GetDetailedLuaType(prop.PropertyType);
            _builder.AppendLine($"---@field {prop.Name} {propType}");
        }

        // Generate methods
        foreach (var method in type.GetMethods(BindingFlags.Public | BindingFlags.Instance))
        {
            if (method.DeclaringType == typeof(object) || method.IsSpecialName)
                continue;

            var parameters = method.GetParameters()
                .Select(p =>
                    $"{LuaTypeConverter.GetLuaParameterName(p.Name, p.ParameterType)}: {LuaTypeConverter.GetDetailedLuaType(p.ParameterType)}"
                )
                .ToList();

            var returnType = method.ReturnType == typeof(void)
                ? "nil"
                : LuaTypeConverter.GetDetailedLuaType(method.ReturnType);

            _builder.AppendLine($"---@field {method.Name} fun({string.Join(", ", parameters)}): {returnType}");
        }

        _builder.AppendLine();
    }

    /// <summary>
    /// Generates context variable definitions
    /// </summary>
    private static async Task GenerateContextVariablesAsync(Dictionary<string, object> contextVariables)
    {
        foreach (var (name, value) in contextVariables)
        {
            if (value is LuaTable table)
            {
                _builder.AppendLine($"---@class {name}");
                foreach (var field in LuaTypeConverter.LuaTableToDictionary(table))
                {
                    _builder.AppendLine($"---@field {field.Key} {LuaTypeConverter.GetLuaType(field.Value)}");
                }

                _builder.AppendLine();
            }
        }
    }

    /// <summary>
    /// Generates table definitions for script modules
    /// </summary>
    private static void GenerateTableDefinitions(IEnumerable<ScriptFunctionDescriptor> functions)
    {
        var tables = functions
            .Select(s => s.FunctionName.Split(".")[0])
            .Distinct()
            .OrderBy(s => s);

        if (!tables.Any()) return;

        _builder.AppendLine("---@section Tables");
        foreach (var table in tables)
        {
            _builder.AppendLine($"{table} = {{}}");
        }

        _builder.AppendLine();
    }

    /// <summary>
    /// Generates individual function definition with proper parameter names and types
    /// </summary>
    private static async Task GenerateFunctionDefinitionAsync(ScriptFunctionDescriptor function)
    {
        if (!string.IsNullOrEmpty(function.Help))
        {
            _builder.AppendLine($"---@description {function.Help}");
        }

        foreach (var param in function.Parameters)
        {
            var paramName = LuaTypeConverter.GetLuaParameterName(param.ParameterName, param.RawParameterType);
            var paramType = LuaTypeConverter.GetDetailedLuaType(param.RawParameterType);
            _builder.AppendLine($"---@param {paramName} {paramType}");
        }

        var returnType = LuaTypeConverter.GetDetailedLuaType(function.RawReturnType);
        _builder.AppendLine($"---@return {returnType}");

        var parameters = function.Parameters
            .Select(p => LuaTypeConverter.GetLuaParameterName(p.ParameterName, p.RawParameterType));

        _builder.AppendLine($"function {function.FunctionName}({string.Join(", ", parameters)}) end");
        _builder.AppendLine();
    }
}
